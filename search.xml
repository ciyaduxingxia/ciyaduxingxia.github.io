<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springcloud概述</title>
      <link href="2021/05/23/springcloud-gai-shu/"/>
      <url>2021/05/23/springcloud-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringCloud概述"><a href="#SpringCloud概述" class="headerlink" title="SpringCloud概述"></a>SpringCloud概述</h2><h3 id="1-微服务技术栈"><a href="#1-微服务技术栈" class="headerlink" title="1.微服务技术栈"></a>1.微服务技术栈</h3><table><thead><tr><th>微服务条目</th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot,Spring,SpringMV</td></tr><tr><td>服务配置与管理</td><td>NetFlix公司的Archaius、阿里的Diamond</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper</td></tr><tr><td>服务调用</td><td>Rest、RPC、gRPC</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>服务接口调用（客户端调用服务的简化工具）</td><td>Feign等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、Chef等</td></tr><tr><td>服务路由（API网关）</td><td>Zuul</td></tr><tr><td>服务监控</td><td>Zabbix、Nagios、Metrics、Specatator</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper</td></tr><tr><td>服务部署</td><td>Docker、OpenStack、Kubernetes等</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream（封装与Redis，Rabbit，Kafka等发送接收消息）</td></tr><tr><td>时间消息总线</td><td>SpringCloud Bus</td></tr></tbody></table><h3 id="2-SpringCloud入门"><a href="#2-SpringCloud入门" class="headerlink" title="2.SpringCloud入门"></a>2.SpringCloud入门</h3><h4 id="2-1-什么是SpringCloud"><a href="#2-1-什么是SpringCloud" class="headerlink" title="2.1 什么是SpringCloud"></a>2.1 什么是SpringCloud</h4><blockquote><p>官方说法：<br>构建分布式系统不需要复杂和容易出错。Spring Cloud  为最常见的分布式系统模式提供了一种简单且易于接受的编程模型，帮助开发人员构建有弹性的、可靠的、协调的应用程序。Spring Cloud 构建于  Spring Boot 之上，使得开发者很容易入手并快速应用于生产中。</p></blockquote><p>简单来说：<code>Spring Cloud</code> 就是微服务系统架构的一站式解决方案，在平时我们构建微服务的过程中需要做如 <strong>服务发现注册</strong> 、<strong>配置中心</strong> 、<strong>消息总线</strong> 、<strong>负载均衡</strong> 、<strong>断路器</strong> 、<strong>数据监控</strong> 等操作，而 Spring Cloud 为我们提供了一套简易的编程模型，使我们能在 Spring Boot 的基础上轻松地实现微服务项目的构建。</p><h4 id="2-2-SpringCloud的版本"><a href="#2-2-SpringCloud的版本" class="headerlink" title="2.2 SpringCloud的版本"></a>2.2 SpringCloud的版本</h4><p><code>Spring Cloud</code> 的版本号并不是我们通常见的数字版本号，而是一些很奇怪的单词。这些单词均为英国伦敦地铁站的站名。同时根据字母表的顺序来对应版本时间顺序，比如：最早 的 <code>Release</code> 版本 <code>Angel</code>，第二个 <code>Release</code> 版本 <code>Brixton</code>（英国地名），然后是 <code>Camden</code>、 <code>Dalston</code>、<code>Edgware</code>、<code>Finchley</code>、<code>Greenwich</code>、<code>Hoxton</code>。</p><h4 id="2-3-为什么选择SpringCloud"><a href="#2-3-为什么选择SpringCloud" class="headerlink" title="2.3 为什么选择SpringCloud"></a>2.3 为什么选择SpringCloud</h4><p><strong>选型依据</strong></p><ul><li>整体式解决方案，成熟的框架</li><li>高热度社区</li><li>可维护性强</li></ul><p><strong>大公司的微服务架构</strong></p><ul><li>阿里：dubbo + HFS</li><li>京东：JSF</li><li>新浪：Motan</li><li>当当网：DubboX</li><li>…</li></ul><p><strong>框架对比</strong></p><table><thead><tr><th>功能</th><th align="center">Netflix/SpringCloud</th><th>Motan</th><th>gRPC</th><th>Thrift</th><th>Dubbo/DubboX</th></tr></thead><tbody><tr><td>功能定位</td><td align="center">完整的微服务框架</td><td>RPC框架，但是整合了ZK或Consul，实现了集群环境的基本服务注册/发现</td><td>RPC框架</td><td>RPC框架</td><td>服务框架</td></tr><tr><td>支持Rest</td><td align="center">是，Ribbon支持多种可插拔的序列化选择</td><td>否</td><td>否</td><td>否</td><td>否</td></tr><tr><td>支持RPC</td><td align="center">否</td><td>是（Hession2）</td><td>是</td><td>是</td><td>是</td></tr><tr><td>支持多语言</td><td align="center">是（Rest形式）</td><td>否</td><td>是</td><td>是</td><td>否</td></tr><tr><td>负载均衡</td><td align="center">是（服务端zuul+客户端Ribbon），zuul服务，动态路由，云端负载均衡Eureka（针对中间层服务器）</td><td>是（客户端）</td><td>否</td><td>否</td><td>是（客户端）</td></tr><tr><td>配置服务</td><td align="center">Netflix Archaius，SpringCloud Config Server集中配置</td><td>是（Zookeeper提供）</td><td>否</td><td>否</td><td>否</td></tr><tr><td>服务调用链监控</td><td align="center">是（zuul），zuul提供边缘服务，API网关</td><td>否</td><td>否</td><td>否</td><td></td></tr><tr><td>高可用/容错</td><td align="center">是（服务端Hystrix+客户端Ribbon）</td><td>是（客户端）</td><td>否</td><td>否</td><td>是（客户端）</td></tr><tr><td>典型应用案例</td><td align="center">Netflix</td><td>Sina</td><td>Google</td><td>Facebook</td><td></td></tr></tbody></table><h4 id="2-4-SpringCloud官方链接"><a href="#2-4-SpringCloud官方链接" class="headerlink" title="2.4 SpringCloud官方链接"></a>2.4 SpringCloud官方链接</h4><p><a href="https://spring.io/projects/spring-cloud/#learn">SpringCloud官方</a></p><p><a href="https://www.springcloud.cc/spring-cloud-netflix.html">SpringCloud Netflix</a></p><p><a href="https://www.springcloud.cc/spring-cloud-dalston.html">SpringCloud中文API文档</a></p><p><a href="http://www.springcloud.cn/">SpringCloud中文社区</a></p><p><a href="https://www.springcloud.cc/">SpringCloud技术栈</a></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统</title>
      <link href="2021/05/21/fen-bu-shi-xi-tong/"/>
      <url>2021/05/21/fen-bu-shi-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h1><h2 id="1-相关理论"><a href="#1-相关理论" class="headerlink" title="1. 相关理论"></a>1. 相关理论</h2><h3 id="A-CAP理论"><a href="#A-CAP理论" class="headerlink" title="A. CAP理论"></a>A. CAP理论</h3><blockquote><ul><li>一致性（Consistency）:所有节点访问同一份最新的数据副本</li><li>可用性（Availability）:非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）</li><li>分区容错性（网络分区）Partition tolerance:分布式系统出现网络分区的时候，仍然能够对外提供服务</li></ul></blockquote><p>​    <strong>什么是网络分区？</strong></p><blockquote><p>分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫网络分区。</p></blockquote><p><img src="https://img-blog.csdn.net/20180729210031417?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eGlhbnM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><code>CAP的三选二的原理:</code></p><blockquote><p><strong>当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。</strong></p><p>简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。</p></blockquote><blockquote><p>AP(放弃C)：放弃强一致性，用最终一致性来保证。</p><p>CP(放弃A)：一旦系统遇见故障，受到影响的服务器需要等待一段时间，在恢复期间无法对外提供服务。</p></blockquote><blockquote><p><strong>为啥无同时保证 CA 呢？</strong></p><p>举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。</p><p><strong>选择的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。</strong></p></blockquote><p><strong>分布式事务是指会涉及到操作多个数据库的事务,在分布式系统中，各个节点之间在物理上相互独 立，通过网络进行沟通和协调。XA 就是 X/Open DTP 定义的交易中间件与数据库之间的接口规范（即接口函数），交易中间件 用它来通知数据库事务的开始、结束以及提交、回滚等。 XA 接口函数由数据库厂商提供。</strong></p><h3 id="B-2P理论-二段提交"><a href="#B-2P理论-二段提交" class="headerlink" title="B. 2P理论(二段提交)"></a>B. 2P理论(二段提交)</h3><p><strong><code>二阶段提交(Two-phase Commit)是指，在计算机网络以及数据库领域内，为了使基于分布式系统 架构下的所有节点在进行事务提交时保持一致性而设计的一种算法(Algorithm)。</code></strong></p><p>二段提交（RDBMS(传统关系型数据库)经常就这种机制，<em><strong>保证强一致性</strong></em>）</p><blockquote><p>提交步骤：</p><p>阶段1：提交事务请求（投票阶段，任何一个结点失败，不能继续进行提交）</p><p><img src="https://img-blog.csdn.net/20180729211305744?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eGlhbnM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>阶段2：执行事务提交（commit、rollback。任何一个结点失败 rollback）</p><p><img src="https://img-blog.csdn.net/20180729211352487?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eGlhbnM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p></blockquote><ul><li><p>缺点：</p><blockquote><p><strong>同步阻塞问题</strong></p><p>​         1、执行过程中，所有参与节点都是事务阻塞型的</p><p>**单点故障 **</p><p>​        2、由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。</p><p>​                解决：<strong>协调者故障，通过选举得到新协调者</strong>（弊端：假如协调者和第一个参与者都挂了；<strong>每个参与者自身的状态只有自己和协调者知道</strong>，因此新协调者无法通过在场的参与者的状态推断出挂了的参与者是什么情况。）                </p><p><strong>数据不一致（脑裂问题）</strong></p><p>​         3、在二阶段提交的阶段二中，当协调者向参与者发送 commit 请求之后，发生了局部网络异 常或者在发送 commit 请求过程中协调者发生了故障，导致只有一部分参与者接受到了 commit 请求。于是整个分布式系统便出现了数据部一致性的现象(脑裂现象)。</p><p><strong>二阶段无法解决的问题（数据状态不确定）</strong></p><p>​         4、协调者再发出 commit 消息之后宕机，<code>而唯一接收到这条消息的参与者同时也宕机了</code>。那 么即使协调者通过选举协议产生了新的协调者，<code>这条事务的状态也是不确定的，没人知道 事务是否被已经提交</code>。</p></blockquote></li></ul><p><strong>解决方案：</strong></p><blockquote><p><strong>1.XA三阶段提交</strong></p><p>XA三阶段提交在两阶段提交的基础上增加了CanCommit阶段，并且引入了超时机制。一旦事物参与者迟迟没有接到协调者的commit请求，会自动进行本地commit。这样有效解决了协调者单点故障的问题。但是性能问题和不一致的问题仍然没有根本解决。</p><p><strong>2.MQ事务</strong></p><p>利用消息中间件来异步完成事务的后一半更新，实现系统的最终一致性。这个方式避免了像XA协议那样的性能问题。</p><p><strong>3.TCC事务</strong></p><p>TCC事务是Try、Commit、Cancel三种指令的缩写，其逻辑模式类似于XA两阶段提交，但是实现方式是在代码层面来人为实现。</p></blockquote><h3 id="C-3P理论-三段提交-一般不用"><a href="#C-3P理论-三段提交-一般不用" class="headerlink" title="C. 3P理论(三段提交)(一般不用)"></a>C. 3P理论(三段提交)(一般不用)</h3><p><strong>与两阶段提交不同的是，三阶段提交有两个改动点。</strong> </p><p>​        1、引入超时机制。同时在协调者和参与者中都引入超时机制。 </p><p>​        2、在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是 一致的。首先<strong>准备阶段的变更成不会直接执行事务</strong>，而是会先去询问此时的参与者是否有条件接这个事务，因此<strong>不会一来就干活直接锁资源</strong>，使得在某些资源不可用的情况下所有参与者都阻塞着。而<strong>预提交阶段的引入起到了一个统一状态的作用</strong>，它像一道栅栏，表明在预提交阶段前所有参与者其实还未都回应，在预处理阶段表明所有参与者都已经回应了。</p><blockquote><p>阶段1：是否可以进行事务提交</p><p><img src="https://img-blog.csdn.net/20180729211432145?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eGlhbnM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>阶段2： 提交事务请求</p><p><img src="https://img-blog.csdn.net/20180729211455148?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eGlhbnM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>阶段3：执行事务提交</p><p><img src="https://img-blog.csdn.net/20180729211520312?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eGlhbnM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p></blockquote><h3 id="D-BASE理论"><a href="#D-BASE理论" class="headerlink" title="D. BASE理论"></a>D. BASE理论</h3><p><strong>BASE 理论，它是在 CAP 理论的基 础之上的延伸。</strong>包括 :</p><blockquote><p>基本可用（Basically Available）:在分布式系统出现，允许损失部分可用性（服务降级、页面降级）v</p><p>柔性状态（Soft State）:允许分布式系统出现中间状态。而且中间状态不影响系统的可用性。</p><p>最终一致性 （Eventual Consistency）:data replications经过一段时间达到一致性。</p></blockquote><h2 id="2-一致性算法"><a href="#2-一致性算法" class="headerlink" title="2. 一致性算法"></a>2. 一致性算法</h2><h3 id="A-paxos一致性算法"><a href="#A-paxos一致性算法" class="headerlink" title="A. paxos一致性算法"></a>A. paxos一致性算法</h3><p>​        paxos算法是莱斯利·兰伯特于1990年提出的一种基于消息传递且具有高度容错特性的一致性算法。Google Chubby的作者Mike Burrows说过这个世界上只有一种一致性算法，那就是paxos，其它的算法都是残次品。</p><p><strong><code>基于拜占庭将军问题解析：</code></strong></p><p>分为以下两种角色：</p><ul><li>proposer：参谋1，参谋2（提交者）</li><li>acceptor： 将军1，将军2，将军3（决策者）</li></ul><blockquote><p><strong>1、先后提议的场景</strong></p><p><img src="https://img-blog.csdn.net/20180729212212421?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eGlhbnM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><ul><li>参谋1发起提议，派通信兵带信给3个将军，内容为（编号1）</li><li>3个将军收到参谋1的提议，由于之前还没有保存任何编号，因此把（编号1）保存下来，避免遗忘；同时让通信兵带信回去，内容为（ok）</li><li>参谋1收到至少2个将军的回复，再次派通信兵带信给3个将军，内容为（编号1，进攻时间1）</li><li>3个将军收到参谋1的时间，把（编号1，进攻时间1）保存下来，避免遗忘；同时让通信兵带信回去，内容为（Accepted）</li><li>参谋1收到至少2个将军的（Accepted）内容，确认进攻时间已经被大家接收；</li><li>参谋2发起提议，派通信兵带信给3个将军，内容为（编号2）</li><li>3个将军收到参谋2的提议，由于（编号2）比（编号1）大，因此把（编号2）保存下来，避免遗忘；又由</li><li>之前已经接受参谋1的提议，因此让通信兵带信回去，内容为（编号1，进攻时间1）</li><li>参谋2收到至少2个将军的回复，由于回复中带来了已接受的参谋1的提议内容，参谋2因此不再提出新的进攻时间，接受参谋1提出的时间</li></ul><p><strong>2、交叉提交场景</strong></p><p><img src="https://img-blog.csdn.net/20180729212438459?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eGlhbnM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><ul><li>参谋1发起提议，派通信兵带信给3个将军，内容为（编号1）；</li><li>3个将军的情况如下:<ul><li>将军1和将军2收到参谋1的提议，将军1和将军2把（编号1）记录下来，如果有其他参谋提出更小的编号，将被拒绝；同时让通信兵带信回去，内容为（ok）</li><li>负责通知将军3的通信兵被抓，因此将军3没收到参谋1的提议</li></ul></li><li>参谋2在同一时间也发起了提议，派通信兵带信给3个将军，内容为（编号2）</li><li>3个将军的情况如下<ul><li>将军2和将军3收到参谋2的提议，将军2和将军3把（编号2）记录下来，如果有其他参谋提出更小的编号，将被拒绝；同时让通信兵带信回去，内容为（ok）</li><li>负责通知将军1的通信兵被抓，因此将军1没收到参谋2的提议</li></ul></li><li>参谋1收到至少2个将军的回复，再次派通信兵带信给有答复的2个将军，内容为（编号1，进攻时间1）</li><li>2个将军的情况如下<ul><li>将军1收到了（编号1，进攻时间1），和自己保存的编号相同，因此把（编号1，进攻时间1）保存下来；同时让通信兵带信回去，内容为（Accepted）</li><li>将军2收到了（编号1，进攻时间1），由于（编号1）小于已经保存的（编号2），因此让通信兵带信回去，内容为（Rejected，编号2）</li></ul></li><li>参谋2收到至少2个将军的回复，再次派通信兵带信给有答复的2个将军，内容为（编号2，进攻时间2）</li><li>将军2和将军3收到了（编号2，进攻时间2），和自己保存的编号相同，因此把（编号2，进攻时间2）保存下来，同时让通信兵带信回去，内容为（Accepted）</li><li>参谋2收到至少2个将军的（Accepted）内容，确认进攻时间已经被多数派接受</li><li>参谋1只收到了1个将军的（Accepted）内容，同时收到一个（Rejected，编号2）;参谋1重新发起提议，派通信兵带信给3个将军，内容为（编号3）</li><li>3个将军的情况如下<ul><li>将军1收到参谋1的提议，由于（编号3）大于之前保存的（编号1），因此把（编号3）保存下来；由于将军1已经接受参谋1前一次的提议，因此让通信兵带信回去，内容为（编号1，进攻时间1）</li><li>将军2收到参谋1的提议，由于（编号3）大于之前保存的（编号2），因此把（编号3）保存下来；由于将军2已经接受参谋2的提议，因此让通信兵带信回去，内容为（编号2，进攻时间2）</li><li>负责通知将军3的通信兵被抓，因此将军3没收到参谋1的提议</li></ul></li><li>参谋1收到了至少2个将军的回复，比较两个回复的编号大小，选择大编号对应的进攻时间作为最新的提议；参谋1再次派通信兵带信给有答复的2个将军，内容为（编号3，进攻时间2）</li><li>将军1和将军2收到了（编号3，进攻时间2），和自己保存的编号相同，因此保存（编号3，进攻时间2），同时让通信兵带信回去，内容为（Accepted）</li><li>参谋1收到了至少2个将军的（accepted）内容，确认进攻时间已经被多数派接受。</li></ul></blockquote><h3 id="B-raft一致性算法"><a href="#B-raft一致性算法" class="headerlink" title="B. raft一致性算法"></a>B. raft一致性算法</h3><h2 id="3-一致性Hash算法"><a href="#3-一致性Hash算法" class="headerlink" title="3. 一致性Hash算法"></a>3. 一致性Hash算法</h2><p><em><strong>参考：</strong></em><a href="https://zhuanlan.zhihu.com/p/98030096">一致性hash算法详解</a></p><h3 id="A-普通Hash算法在分布式应用中的不足"><a href="#A-普通Hash算法在分布式应用中的不足" class="headerlink" title="A. 普通Hash算法在分布式应用中的不足"></a>A. 普通Hash算法在分布式应用中的不足</h3><blockquote><p>比如，在分布式的存储系统中，要将数据存储到具体的节点上，如果我们采用普通的hash算法进行路由，将数据映射到具体的节点上，如key%N，key是数据的key，N是机器节点数，如果有一个机器加入或退出这个集群，则所有的数据映射都无效了，如果是持久化存储则要做数据迁移，如果是分布式缓存，则其他缓存就失效了。</p></blockquote><h3 id="B-一致性Hash算法"><a href="#B-一致性Hash算法" class="headerlink" title="B. 一致性Hash算法"></a>B. 一致性Hash算法</h3><blockquote><p>一致性哈希提出了在动态变化的Cache环境中，哈希算法应该满足的4个适应条件(from 百度百科)：</p><p>A:均衡性(Balance)</p><p>平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。很多哈希算法都能够满足这一条件。</p><p>B:单调性(Monotonicity)</p><p>单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲区加入到系统中，那么哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲区中去，而不会被映射到旧的缓冲集合中的其他缓冲区。（这段翻译信息有负面价值的，当缓冲区大小变化时一致性哈希(Consistent hashing)尽量保护已分配的内容不会被重新映射到新缓冲区。）</p><p>C:分散性(Spread)</p><p>在分布式环境中，终端有可能看不到所有的缓冲，而是只能看到其中的一部分。当终端希望通过哈希过程将内容映射到缓冲上时，由于不同终端所见的缓冲范围有可能不同，从而导致哈希的结果不一致，最终的结果是相同的内容被不同的终端映射到不同的缓冲区中。这种情况显然是应该避免的，因为它导致相同内容被存储到不同缓冲中去，降低了系统存储的效率。分散性的定义就是上述情况发生的严重程度。好的哈希算法应能够尽量避免不一致的情况发生，也就是尽量降低分散性。</p><p>D:负载(Load)</p><p>负载问题实际上是从另一个角度看待分散性问题。既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同的内容。与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够尽量降低缓冲的负荷。</p></blockquote><h5 id="B-1-环形hash空间"><a href="#B-1-环形hash空间" class="headerlink" title="B.1 环形hash空间"></a>B.1 环形hash空间</h5><p>​        <em>按照常用的hash算法来将对应的key哈希到一个具有2^32次方个节点的空间中，即0 ~ (2^32)-1的数字空间中。现在我们可以将这些数字头尾相连，想象成一个闭合的环形。</em>整个hash环我们可以用TreeMap来实现，因为treeMap是排序的，我们刚好可以利用上。</p><p><img src="https://pic2.zhimg.com/80/v2-0a21bff27b5f037748292aa338965d65_720w.jpg" alt="img"></p><h5 id="B-2-映射服务器节点"><a href="#B-2-映射服务器节点" class="headerlink" title="B.2 映射服务器节点"></a>B.2 映射服务器节点</h5><p>​        <em>将各个服务器使用Hash进行一个哈希，具体可以选择服务器的ip或唯一主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置。假设我们将四台服务器使用ip地址哈希后在环空间的位置如下：</em></p><p><img src="https://pic4.zhimg.com/80/v2-252cc4ed5bbb07e5e1e3b27c5eda0d23_720w.jpg" alt="img"></p><h5 id="B-3-映射数据"><a href="#B-3-映射数据" class="headerlink" title="B.3 映射数据"></a>B.3 映射数据</h5><p>​        <em>现在我们将objectA、objectB、objectC、objectD四个对象通过特定的Hash函数计算出对应的key值，然后散列到Hash环上,然后从数据所在位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器。</em></p><p><img src="https://pic3.zhimg.com/80/v2-0fb33fe30c7a05eee2abe3784a42f98a_720w.jpg" alt="img"></p><h5 id="B-4-服务器的删除与添加"><a href="#B-4-服务器的删除与添加" class="headerlink" title="B.4 服务器的删除与添加"></a>B.4 服务器的删除与添加</h5><blockquote><ul><li>如果此时NodeC宕机了，此时Object A、B、D不会受到影响，只有Object C会重新分配到Node D上面去，而其他数据对象不会发生变化</li><li>如果在环境中新增一台服务器Node X，通过hash算法将Node X映射到环中，通过按顺时针迁移的规则，那么Object C被迁移到了Node X中，其它对象还保持这原有的存储位置。通过对节点的添加和删除的分析，一致性哈希算法在保持了单调性的同时，还是数据的迁移达到了最小，这样的算法对分布式集群来说是非常合适的，避免了大量数据迁移，减小了服务器的的压力。</li></ul></blockquote><p><img src="https://pic4.zhimg.com/80/v2-bf7daae4aa145478dd55fc339ee57ec7_720w.jpg" alt="img"></p><h5 id="B-5-虚拟节点"><a href="#B-5-虚拟节点" class="headerlink" title="B.5 虚拟节点"></a>B.5 虚拟节点</h5><p>​        <em>到目前为止一致性hash也可以算做完成了，但是有一个问题还需要解决，那就是<strong>平衡性</strong>。当服务器节点比较少的时候，会出现一个问题，就是此时必然造成大量数据集中到一个节点上面，极少数数据集中到另外的节点上面。</em></p><p><img src="https://pic4.zhimg.com/80/v2-0ce62cf40bcc5f980cafe285dafe0633_720w.jpg" alt="img"></p><p>​        <em>为了解决这种数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点。具体做法可以先确定每个物理节点关联的虚拟节点数量，然后在ip或者主机名后面增加编号。</em></p><p><img src="https://pic1.zhimg.com/80/v2-5d9cdea01cb4b44162aa41980345e8ac_720w.jpg" alt="img"></p><h2 id="4-分布式ID"><a href="#4-分布式ID" class="headerlink" title="4. 分布式ID"></a>4. 分布式ID</h2><blockquote><p>ID是数据的唯一标识，传统的做法是利用UUID和数据库的自增ID，在互联网企业中，大部分公司使用的都是Mysql，并且因为需要事务支持，所以通常会使用Innodb存储引擎，UUID太长以及无序，所以并不适合在Innodb中来作为主键，自增ID比较合适，但是随着公司的业务发展，数据量将越来越大，需要对数据进行分表，而分表后，每个表中的数据都会按自己的节奏进行自增，很有可能出现ID冲突。这时就需要一个单独的机制来负责生成唯一ID，生成出来的ID也可以叫做<strong>分布式ID</strong>，或<strong>全局ID</strong>。下面来分析各个生成分布式ID的机制。</p></blockquote><h2 id="5-Dubbo"><a href="#5-Dubbo" class="headerlink" title="5. Dubbo"></a>5. Dubbo</h2><p>Dubbo的学习一定要看官网，这里粘一下关于负载均衡的源代码解析，整个源代码更迭过程很有启发:<a href="https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/">https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/</a></p><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需<strong>一个治理系统</strong>确保架构有条不紊的演进。</p><p>在Dubbo的官网文档有这样一张图</p><p><img src="https://dubbo.apache.org/imgs/user/dubbo-architecture-roadmap.jpg" alt="image"></p><h4 id="1-单一应用架构-All-in-One"><a href="#1-单一应用架构-All-in-One" class="headerlink" title="1. 单一应用架构(All in One)"></a>1. 单一应用架构(All in One)</h4><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshw2ITicetDcFsg41kISOhuyojGB1Z8ics61xtqnicJTXDk7Qw41dkeXK2A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p><p><strong>缺点：</strong></p><p>1、性能扩展比较难</p><p>2、协同开发问题</p><p>3、不利于升级维护</p><h4 id="2-垂直应用架构-Vertical-Application"><a href="#2-垂直应用架构-Vertical-Application" class="headerlink" title="2. 垂直应用架构(Vertical Application)"></a>2. 垂直应用架构(Vertical Application)</h4><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshG4FicWRMjbfStG0Ojr1H9cL1jQ1SbZ0s7rsbsc7w8f3usmdSJog7pHA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p><p>缺点：公用模块无法重复利用，开发性的浪费</p><h4 id="3-分布式服务架构-Distributed-Service"><a href="#3-分布式服务架构-Distributed-Service" class="headerlink" title="3. 分布式服务架构(Distributed Service)"></a>3. 分布式服务架构(Distributed Service)</h4><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshwIkic8EicmCwYGRibdWohmDazEDhonhTeJfVx0dfBNlW4dGGxvOMOk0Gg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h4 id="4-弹性计算架构-Elastic-Computing"><a href="#4-弹性计算架构-Elastic-Computing" class="headerlink" title="4. 弹性计算架构(Elastic Computing)"></a>4. 弹性计算架构(Elastic Computing)</h4><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心</strong>(SOA)[ Service Oriented Architecture]是关键。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshxoCosFhoMzIcbBzjCt6ia9Gr7atHlwNHhL0po4YhyE8WkHXnnpN8Ddg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="6-RPC和HTTP"><a href="#6-RPC和HTTP" class="headerlink" title="6. RPC和HTTP"></a>6. RPC和HTTP</h2><p>无论是微服务还是分布式服务（都是SOA，都是面向服务编程），都面临着服务间的远程调用。那么服务间的远程调用方式有哪些呢？</p><p>常见的远程调用方式有以下几种：</p><ul><li><p>RPC：是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。，类似的还有RMI（Remote Methods Invoke  远程方法调用，是JAVA中的概念，是JAVA十三大技术之一）。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的webservice，现在热门的dubbo，都是RPC的典型</p></li><li><ul><li>RPC的框架：webservie(cxf)、dubbo(阿里巴巴开源的基于 Java 的高性能 RPC)</li><li>RMI的框架：hessian</li></ul></li></ul><ul><li><p>Http：http其实是一种网络传输协议，基于TCP，规定了数据传输的格式。现在客户端浏览器与服务端通信基本都是采用Http协议。也可以用来进行远程服务调用。缺点是消息封装臃肿。<br>现在热门的Rest风格，就可以通过http协议来实现。</p></li><li><ul><li>http的实现技术：HttpClient</li></ul></li></ul><p><strong>RPC基本原理</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshVx3xhf4RyUVtia7Tvo4BBs70SFKRonhrPrNsiap2rEAQCn4IWUoS3HZA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>步骤解析：</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshDCibUnIYkolqibQRy7Qlpm9vNibK9IDaFibJoLpIM5pWLe7Yqly7PheYsg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>RPC两个核心模块：通讯，序列化。</p><p><strong>要实现一个RPC不算难，难的是实现一个高性能高可靠的RPC框架。</strong></p><p>比如，既然是分布式了，那么一个服务可能有多个实例，你在调用时，要如何获取这些实例的地址呢？</p><p>这时候就需要一个服务注册中心，比如在Dubbo里头，就可以使用Zookeeper作为注册中心，在调用时，从Zookeeper获取服务的实例列表，再从中选择一个进行调用。</p><p>那么选哪个调用好呢？这时候就需要负载均衡了，于是你又得考虑如何实现复杂均衡，比如Dubbo就提供了好几种负载均衡策略。</p><p>这还没完，总不能每次调用时都去注册中心查询实例列表吧，这样效率多低呀，于是又有了缓存，有了缓存，就要考虑缓存的更新问题，blablabla……</p><p>你以为就这样结束了，没呢，还有这些：</p><ul><li>客户端总不能每次调用完都干等着服务端返回数据吧，于是就要支持异步调用；</li><li>服务端的接口修改了，老的接口还有人在用，怎么办？总不能让他们都改了吧？这就需要版本控制了；</li><li>服务端总不能每次接到请求都马上启动一个线程去处理吧？于是就需要线程池；</li><li>服务端关闭时，还没处理完的请求怎么办？是直接结束呢，还是等全部请求处理完再关闭呢？</li><li>……</li></ul><h3 id="RPC和HTTP认知误区勘误"><a href="#RPC和HTTP认知误区勘误" class="headerlink" title="RPC和HTTP认知误区勘误"></a>RPC和HTTP认知误区勘误</h3><p>rpc是远端过程调用，其调用协议通常包含传输协议和序列化协议。</p><p>传输协议包含: 如著名的gRPC 使用的 http2 协议，也有如dubbo一类的自定义报文的tcp协议。</p><p>序列化协议包含: 如基于文本编码的 xml json，也有二进制编码的 protobuf hessian等。</p><p><strong>为什么要使用自定义 tcp 协议的 rpc 做后端进程通信？</strong></p><p>要解决这个问题就应该搞清楚 http 使用的 tcp 协议，和我们自定义的 tcp 协议在报文上的区别。</p><p>首先要否认一点 http 协议相较于自定义tcp报文协议，增加的开销在于连接的建立与断开。http协议是支持连接池复用的，也就是建立一定数量的连接不断开，并不会频繁的创建和销毁连接。二一要说的是http也可以使用protobuf这种二进制编码协议对内容进行编码，因此二者最大的区别还是在传输协议上。</p><p>通用定义的http1.1协议的tcp报文包含太多废信息，一个POST协议的格式大致如下</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">HTTP/1.0 200 OK Content-Type: text/plainContent-Length: 137582Expires: Thu, 05 Dec 1997 16:00:00 GMTLast-Modified: Wed, 5 August 1996 15:55:28 GMTServer: Apache 0.84<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即使编码协议也就是body是使用二进制编码协议，报文元数据也就是header头的键值对却用了文本编码，非常占字节数。如上图所使用的报文中有效字节数仅仅占约 30%，也就是70%的时间用于传输元数据废编码。当然实际情况下报文内容可能会比这个长，但是报头所占的比例也是非常可观的。</p><p>那么假如我们使用自定义tcp协议的报文如下</p><p><img src="https://pic4.zhimg.com/50/v2-89c905b0806577471aa7789a25ac0d44_hd.jpg?source=1940ef5c" alt="img"></p><p>报头占用的字节数也就只有16个byte，极大地精简了传输内容。</p><p>这也就是为什么后端进程间通常会采用自定义tcp协议的rpc来进行通信的原因。</p><p>但是现在越来越少使用RPC了，是因为RPC所谓的效率优势是针对http1.1协议来讲的，http2.0协议已经优化编码效率问题，像grpc这种rpc库使用的就是http2.0协议。</p><p>所以说成熟的rpc库相对http容器，更多的是封装了“服务发现”，”负载均衡”，“熔断降级”一类面向服务的高级特性。可以这么理解，rpc框架是面向服务的更高级的封装。如果把一个http servlet容器上封装一层服务发现和函数代理调用，那它就已经可以做一个rpc框架了。因此良好的rpc调用是面向服务的封装，针对服务的可用性和效率等都做了优化。单纯使用http调用则缺少了这些特性。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> RPC </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot之cron表达式</title>
      <link href="2021/05/21/springboot-zhi-cron-biao-da-shi/"/>
      <url>2021/05/21/springboot-zhi-cron-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot之cron表达式"><a href="#springboot之cron表达式" class="headerlink" title="springboot之cron表达式"></a>springboot之cron表达式</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>在学习springboot的定时任务时，在方法上的<code>@Scheduled(cron = &quot;0 * * * * 0-7&quot;)</code>注解可以用cron表达式来表示定时的时间，这个博客来详细讲下cron表达式</p><h3 id="2-Cron详解"><a href="#2-Cron详解" class="headerlink" title="2.Cron详解"></a>2.Cron详解</h3><h4 id="字段释义"><a href="#字段释义" class="headerlink" title="字段释义"></a>字段释义</h4><pre class="line-numbers language-none"><code class="language-none">0 0&#x2F;5 * * * ？秒    分    时    天(月)    月    天(周)    年份(一般省略)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="符号释义"><a href="#符号释义" class="headerlink" title="符号释义"></a>符号释义</h4><p><code>*</code>：表示所有可能的值</p><p><code>/</code>：表示数值的增量，简单来说，比如分写上<code>0/5</code>表示从0分开始，每隔5分钟</p><p><code>?</code>：仅用在天(月)和天(周)，表示不指定值，当其中一个有值时，另外一个需要设为`?</p><h4 id="字段允许字符"><a href="#字段允许字符" class="headerlink" title="字段允许字符"></a>字段允许字符</h4><h5 id="秒：0-59"><a href="#秒：0-59" class="headerlink" title="秒：0-59 , - * /"></a>秒：<code>0-59</code> <code>,</code> <code>-</code> <code>*</code> <code>/</code></h5><ul><li>26：表示第26秒</li><li>5,16,27：表示第5秒、第16秒和第27秒</li><li>1-5：表示从1秒到5秒，就是1 2  3  4 5 秒</li><li>*：表示每一秒</li><li>2/15：表示从第2秒开始，每隔15秒，就是2 17 32 47 秒</li></ul><h5 id="分：0-59"><a href="#分：0-59" class="headerlink" title="分：0-59 , - * /"></a>分：<code>0-59</code> <code>,</code> <code>-</code> <code>*</code> <code>/</code></h5><p>根据上述的秒，同理可得</p><ul><li>26：表示第26分钟</li><li>5,16,27：表示第5分钟、第16分钟和第27分钟</li><li>1-5：表示从1秒到5分，就是第1 2  3  4 5 分钟</li><li>*：表示每一分钟</li><li>2/15：表示从第2分钟开始，每隔15分钟，就是2 17 32 47 分钟</li></ul><h5 id="时：0-23"><a href="#时：0-23" class="headerlink" title="时：0-23 , - * /"></a>时：<code>0-23</code> <code>,</code> <code>-</code> <code>*</code> <code>/</code></h5><ul><li>10：表示早上10点</li><li>22：表示晚上10点</li><li>2,8,18,23：表示凌晨2点，早上8点，傍晚6点和晚上11点</li><li>9-17：表示朝九晚五，就是9 10 11 12 13 14 15 16 17 点</li><li>*：表示每小时</li><li>10/2：表示从早上10点开始，每隔2小时</li></ul><h5 id="天（月）：1-31-L-W-C"><a href="#天（月）：1-31-L-W-C" class="headerlink" title="天（月）：1-31 , - * / ? L W C"></a>天（月）：<code>1-31</code> <code>,</code> <code>-</code> <code>*</code> <code>/</code> <code>?</code> <code>L</code> <code>W</code> <code>C</code></h5><ul><li>31：表示31号（注意有的月份是没有31号的）</li><li>5,10,15：表示5号、10号和15号</li><li>8-17：表示8号到17号</li><li>*：表示所有可能的值（当指定为星号时，天（周）需指定为?）</li><li>5/9：表示从5号开始，每隔9天</li><li>？：当天（周）指定任意值的时候，天（月）需要设置为?</li><li>L：表示一个月中的最后一天</li><li>6L：表示倒数第6天</li><li>15W：W指工作日，如果15号不是周六日，则表示15号当天；如果15号是周六，则表示14号；如果15号是周日，则表示16号；如果31W是周日，则31W表示29号（周五），不会跨月</li><li>LW：指最后一个工作日</li><li>15C：表示第15天（不是很明白这个，使用15和15C貌似效果相同？）</li></ul><h5 id="月：1-12"><a href="#月：1-12" class="headerlink" title="月：1-12 , - * /"></a>月：<code>1-12</code> <code>,</code> <code>-</code> <code>*</code> <code>/</code></h5><ul><li>10：表示10月份</li><li>5,10,11：表示5月份、10月份和11月份</li><li>4-8：表示4月份到8月份</li><li>*：表示所有可能的值</li><li>5/2：表示从5月份开始，每隔2个月，（就是5 7 9 11 次年5 次年7 次年9……）</li><li>1-12：也可以用JAN-DEC表示</li></ul><h5 id="天（周）：MON-SAT-L-C"><a href="#天（周）：MON-SAT-L-C" class="headerlink" title="天（周）：MON-SAT  , - * / ? L C #"></a>天（周）：<code>MON-SAT</code>  <code>,</code> <code>-</code> <code>*</code> <code>/</code> <code>?</code> <code>L</code> <code>C</code> <code>#</code></h5><ul><li>MON：表示周一</li><li>MON,TUE,FRI：表示周一，周二和周五</li><li>MON-FRI：表示从周一到周五</li><li>MON-WED,SAT：表示从周一到周三，和周六（就是周一、周二、周三和周六）</li><li>mon,tue,wed,thu,fri,sat,sun：表示周一到周日（大小写均可，取星期英文前三个字母，注意星期四是thu，而不是thur）</li><li>7L：表示最后一个周六（效果等同于SATL）（L表示last最后的意思，7表示周六，6表示周五，类推，1表示周日）</li><li>6C：表示周五以及之后包含周五的日期（感觉效果FRI一样，具体还没深究）</li><li>7#2：表示第二个周六（#前面的数字表示星期，1表示周日，2表示周一，以此类推；#后面的数字表示第几个）</li></ul><h5 id="年：留空-2020-2099"><a href="#年：留空-2020-2099" class="headerlink" title="年：留空  2020-2099 , - * /"></a>年：<code>留空</code>  <code>2020-2099</code> <code>,</code> <code>-</code> <code>*</code> <code>/</code></h5><ul><li>2050：表示2050年</li><li>2020,2030,2040：表示2020年、2030年和2040年</li><li>2020-2030：表示2020年到2030年</li><li>*：表示所有可能的值</li><li>2020/10：表示从2020年开始，每隔10年，（就是2020,2030,2040……）</li></ul><h3 id="3-例子"><a href="#3-例子" class="headerlink" title="3.例子"></a>3.例子</h3><ul><li><p>每隔5分钟执行一次（从0分开始）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> ？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>从0时开始，每小时执行一次</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>每天的7点30分</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span> <span class="token number">30</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>工作日的早上6点30分（即是周一到周五，每天早上的6点30分）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span> <span class="token number">30</span> <span class="token number">6</span> <span class="token operator">?</span> <span class="token operator">*</span> MON<span class="token operator">-</span>FRI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>每个月的最后一天早上的10点整</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span> <span class="token class-name">L</span> <span class="token operator">*</span>　<span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>每个月的最后一个工作日的晚上6点30分（18:30）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span> <span class="token number">30</span> <span class="token number">18</span> LW <span class="token operator">*</span> <span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>朝九晚五，每小时</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">9</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2020年的8月份每个星期六和星期日早上10点28分28秒</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">28</span> <span class="token number">28</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token number">8</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token number">2020</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span>中，<span class="token number">1</span>表示周日，<span class="token number">7</span>表示周六<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>每个月的倒数第二天的早上8点整</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">8</span> <span class="token class-name">L</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">?</span><span class="token class-name">L</span>表示最后一天（倒数第一天），<span class="token class-name">L</span><span class="token operator">-</span><span class="token number">1</span>则表示倒数第二天，以此类推<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>下面是网上一些例子，我直接拿过来了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token string">"0 0 12 * * ?"</span> 每天中午<span class="token number">12</span>点触发 <span class="token string">"0 15 10 ? * *"</span> 每天上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发 <span class="token string">"0 15 10 * * ?"</span> 每天上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发 <span class="token string">"0 15 10 * * ? *"</span> 每天上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发 <span class="token string">"0 15 10 * * ? 2005"</span> <span class="token number">2005</span>年的每天上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发 <span class="token string">"0 * 14 * * ?"</span> 在每天下午<span class="token number">2</span>点到下午<span class="token number">2</span><span class="token operator">:</span><span class="token number">59</span>期间的每<span class="token number">1</span>分钟触发 <span class="token string">"0 0/5 14 * * ?"</span> 在每天下午<span class="token number">2</span>点到下午<span class="token number">2</span><span class="token operator">:</span><span class="token number">55</span>期间的每<span class="token number">5</span>分钟触发 <span class="token string">"0 0/5 14,18 * * ?"</span> 在每天下午<span class="token number">2</span>点到<span class="token number">2</span><span class="token operator">:</span><span class="token number">55</span>期间和下午<span class="token number">6</span>点到<span class="token number">6</span><span class="token operator">:</span><span class="token number">55</span>期间的每<span class="token number">5</span>分钟触发 <span class="token string">"0 0-5 14 * * ?"</span> 在每天下午<span class="token number">2</span>点到下午<span class="token number">2</span><span class="token operator">:</span><span class="token number">05</span>期间的每<span class="token number">1</span>分钟触发 <span class="token string">"0 10,44 14 ? 3 WED"</span> 每年三月的星期三的下午<span class="token number">2</span><span class="token operator">:</span><span class="token number">10</span>和<span class="token number">2</span><span class="token operator">:</span><span class="token number">44</span>触发 <span class="token string">"0 15 10 ? * MON-FRI"</span> 周一至周五的上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发 <span class="token string">"0 15 10 15 * ?"</span> 每月<span class="token number">15</span>日上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发 <span class="token string">"0 15 10 L * ?"</span> 每月最后一日的上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发 <span class="token string">"0 15 10 ? * 6L"</span> 每月的最后一个星期五上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发 <span class="token string">"0 15 10 ? * 6L 2002-2005"</span> <span class="token number">2002</span>年至<span class="token number">2005</span>年的每月的最后一个星期五上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发 <span class="token string">"0 15 10 ? * 6#3"</span> 每月的第三个星期五上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-要点"><a href="#4-要点" class="headerlink" title="4.要点"></a>4.要点</h3><ul><li>一般是有6个位置，分别表示 <strong>分 秒 时 天(月) 月 天(周)</strong>   第7个位置是年，一般省略</li><li>6个位置中的 <strong>天(月)</strong> 表示一个月中的第几天，即是几月几号中的几号；<strong>天(周)</strong> 表示一周中的第几天，周日为第一天，周六为第七天</li><li>**天(月)<strong>和</strong>天(周)**不能同时指定，其中必定有一个是 <strong>?</strong></li><li><strong>?</strong> 只能用在 <strong>天(月)<strong>和</strong>天(周)</strong></li><li>2-10：符号  <strong>-</strong>  表示范围区间</li><li>2/10：符号  <strong>/</strong>  表示频率，从2开始，每隔10，即2，12，22……类推</li><li>2,10：符号  <strong>,</strong>  表示和，<code>2,10</code>表示2和10</li><li>L：last的缩写，表示最后，只能用在<strong>天(月)<strong>和</strong>天(周)<strong>，一般和数字搭配使用，如L在天(月)中表示一个月中的最后一天，</strong>L-1</strong>则表示<strong>每个月的倒数第二天</strong>；3L在天(周)中则表示最后一个星期二</li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> cron表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot之视图解析器</title>
      <link href="2021/05/21/springboot-zhi-shi-tu-jie-xi-qi/"/>
      <url>2021/05/21/springboot-zhi-shi-tu-jie-xi-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot之视图解析器"><a href="#springboot之视图解析器" class="headerlink" title="springboot之视图解析器"></a>springboot之视图解析器</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>在springmvc中在web.xml配置完dispatcherServlet之后还有一个非常重要的步骤就是在application.xml文件中添加视图解析器ViewResolver的配置，如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--添加视图解析器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--前缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--后缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在springboot中没有了配置，那么springboot是怎么帮我们添加视图解析器的呢？我们通过源码来探析。</p><h3 id="2-源码探析"><a href="#2-源码探析" class="headerlink" title="2. 源码探析"></a>2. 源码探析</h3><p>通过官方文档我们发现springboot自带了两个视图解析器<code>ContentNegotiatingViewResolver</code>和<code>BeanNameViewResolver</code></p><p>并且在我们导入thymeleaf模板引擎之后，thymeleaf也自带了视图解析器，默认路径是templates包下</p><p>查看ContentNegotiatingViewResolver和BeanNameViewResolver，发现这两个类都实现了一个公共接口ViewResolver。也都重写了接口方法resolveViewName</p><p>下面是ContentNegotiatingViewResolver重写的resolveViewName方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">resolveViewName</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RequestAttributes</span> attrs <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>attrs <span class="token keyword">instanceof</span> <span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">,</span> <span class="token string">"No current ServletRequestAttributes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">></span></span> requestedMediaTypes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMediaTypes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span>attrs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestedMediaTypes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//重点就在这两行代码，它会通过getCandidateViews获取所有候选的视图解析器，</span>        <span class="token comment">//并通过getBestView选择最好的视图解析器</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">View</span><span class="token punctuation">></span></span> candidateViews <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCandidateViews</span><span class="token punctuation">(</span>viewName<span class="token punctuation">,</span> locale<span class="token punctuation">,</span> requestedMediaTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">View</span> bestView <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBestView</span><span class="token punctuation">(</span>candidateViews<span class="token punctuation">,</span> requestedMediaTypes<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bestView <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> bestView<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是BeanNameViewResolver重写的resolveViewName方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">resolveViewName</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>viewName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>viewName<span class="token punctuation">,</span> <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Found bean named '"</span> <span class="token operator">+</span> viewName <span class="token operator">+</span> <span class="token string">"' but it does not implement View"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>viewName<span class="token punctuation">,</span> <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-自定义视图解析器"><a href="#3-自定义视图解析器" class="headerlink" title="3. 自定义视图解析器"></a>3. 自定义视图解析器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//拓展springmvc配置</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ViewResolver</span> <span class="token function">myViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//自定义了一个自己的视图解析器MyViewResolver</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyViewResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ViewResolver</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">resolveViewName</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双击shift找到DispatcherServlet类，ctrl+F找到doDispatch方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServlet</span> <span class="token keyword">extends</span> <span class="token class-name">FrameworkServlet</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在doDispatch方法上打上断点，并进行Debug，会有以下图：</p><p><img src="/.io//1.png" alt="自定义视图解析器Debug图"></p><p>可以看到，我们的自定义视图解析器被springboot自动扫描上了</p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 视图解析器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot之首页配置</title>
      <link href="2021/05/21/springboot-zhi-shou-ye/"/>
      <url>2021/05/21/springboot-zhi-shou-ye/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot之首页配置"><a href="#springboot之首页配置" class="headerlink" title="springboot之首页配置"></a>springboot之首页配置</h2><p>在<code>WebMvcAutoConfiguration</code>中有如下方法有关首页配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">WelcomePageHandlerMapping</span> <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span> <span class="token class-name">FormattingConversionService</span> mvcConversionService<span class="token punctuation">,</span> <span class="token class-name">ResourceUrlProvider</span> mvcResourceUrlProvider<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//重点在于this.getWelcomePage()</span>    <span class="token class-name">WelcomePageHandlerMapping</span> welcomePageHandlerMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TemplateAvailabilityProviders</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>mvcConversionService<span class="token punctuation">,</span> mvcResourceUrlProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setCorsConfigurations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCorsConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> welcomePageHandlerMapping<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>this.getWelcomePage()</code>方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Resource</span> <span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> var2 <span class="token operator">=</span> var1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var3 <span class="token operator">&lt;</span> var2<span class="token punctuation">;</span> <span class="token operator">++</span>var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> location <span class="token operator">=</span> var1<span class="token punctuation">[</span>var3<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//获取首页</span>        <span class="token class-name">Resource</span> indexHtml <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIndexHtml</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>indexHtml <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> indexHtml<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIndexHtml</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletContextResource</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//根据首页位置获取首页</span><span class="token keyword">private</span> <span class="token class-name">Resource</span> <span class="token function">getIndexHtml</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIndexHtml</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Resource</span> <span class="token function">getIndexHtml</span><span class="token punctuation">(</span><span class="token class-name">Resource</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//首页url为/index.html</span>        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">createRelative</span><span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resource<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> resource<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 首页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spingboot之静态资源导出原理</title>
      <link href="2021/05/13/springboot-zhi-jing-tai-zi-yuan-dao-ru/"/>
      <url>2021/05/13/springboot-zhi-jing-tai-zi-yuan-dao-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="spingboot静态资源导出原理探究"><a href="#spingboot静态资源导出原理探究" class="headerlink" title="spingboot静态资源导出原理探究"></a>spingboot静态资源导出原理探究</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>springboot相较于springmvc没有了webapp这个目录文件夹，那么springboot中静态资源应该存放在哪呢？</p><p>接下来我们通过探析源码的方式来解决这个问题</p><h3 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2.源码解析"></a>2.源码解析</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//添加资源处理的方法</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果自定义了静态资源处理，即在.properties或者.yaml文件中</span>        <span class="token comment">//即配置这个属性spring.mvc.static-path-pattern=/**</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第一种是通过webjars下寻找</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"/webjars/**"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二种是通过getStaticLocations()获取this.staticLocations，</span>        <span class="token comment">//而this.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span>        <span class="token comment">//CLASSPATH_RESOURCE_LOCATIONS = new String[]&#123;"classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"&#125;;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>registration<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">ServletContextResource</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种方法：webjars，在pom文件中加入以下依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在lib中就会有以下结构的包</p><p><img src="/.io//MyBlog\source_posts\springboot之静态资源导入\1.png" alt="webjars结构图及对应关系"></p><p>通过访问localhost:8080/webjars/jquery/3.6.0/jquery.js即可访问静态资源，但是一般不这么用</p><p>第二种方法：放在”classpath:/resources/“, “classpath:/static/“, “classpath:/public/“这三个路径下</p><p>目录结构如下</p><p><img src="/.io//MyBlog\source_posts\springboot之静态资源导入\2.png" alt="静态资源存储路径"></p><p>访问路径为:localhost:8080/1.js</p><p>其中访问优先度为resources&gt;static&gt;public</p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="2021/05/13/wei-fu-wu/"/>
      <url>2021/05/13/wei-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><blockquote><p>简而言之，微服务架构风格是一种将单个应用程序开发为一套小型服务的方法，每个小型服务都在自己的进程中运行，并以轻量级机制（通常是 HTTP  资源  API）进行通信。</p><p>这些服务围绕业务功能构建，可通过全自动部署机制来独立部署。这些服务共用一个最小型的集中式管理，它们可以使用不同的编程语言编写，并使用不同的数据存储技术。</p></blockquote><p>单体(monolithic)（all in one）风格:</p><blockquote><p>单体应用程序被构建为单一单元。企业应用程序通常由三个部分构成：客户端用户界面（由用户机器上的浏览器中运行的 HTML 页面和 JS组成）、数据库（由许多表组成，通常是在关系型数据库中管理）系统、服务器端应用程序。服务器端应用程序处理 HTTP  请求，执行一些逻辑处理，从数据库检索和更新数据，选择数据并填充到要发送到浏览器的 HTML  视图中。这个服务器端应用程序是一个整体——那么发生任何更改都会影响到应用程序的构建和部署</p><p>优点：易于开发和测试，方便部署，当需要扩展的时候只需要把war包复制多份，然后放在多个服务器上，再做个负载均衡即可</p><p>缺点：在将更多应用程序部署到云的时候。变更周期被捆绑在一起——即使只是对应用程序的一小部分进行了更改，也需要重建和部署整个单体应用。随着时间的推移，通常很难保持良好的模块化结构。对系统进行扩展时，不得不扩展整个应用系统。</p></blockquote><p>微服务原文可见：<a href="https://www.martinfowler.com/articles/microservices.html">https://www.martinfowler.com/articles/microservices.html</a></p><p>微服务风格并不是新颖的或创新的，其根源至少可以追溯到 Unix 的设计原则</p><p><img src="https://doocs.gitee.io/advanced-java/docs/micro-services/images/sketch.png" alt="微服务设计原理"></p><h2 id="从单体式架构到微服务架构"><a href="#从单体式架构到微服务架构" class="headerlink" title="从单体式架构到微服务架构"></a>从单体式架构到微服务架构</h2><h3 id="迁移到微服务综述"><a href="#迁移到微服务综述" class="headerlink" title="迁移到微服务综述"></a>迁移到微服务综述</h3><p>迁移单体式应用到微服务架构意味着一系列现代化过程，有点像这几代开发者一直在做的事情，实时上，当迁移时，我们可以重用一些想法。</p><p>一个策略是：不要大规模（big bang）重写代码（只有当你承担重建一套全新基于微服务的应用时候可以采用重写这种方法）。重写代码听起来很不错，但实际上充满了风险最终可能会失败，就如 Martin Fowler 所说：</p><blockquote><p>“the only thing a Big Bang rewrite guarantees is a Big Bang!”</p></blockquote><p>相反，应该采取逐步迁移单体式应用的策略，通过逐步生成微服务新应用，与旧的单体式应用集成，随着时间推移，单体式应用在整个架构中比例逐渐下降直到消失或者成为微服务架构一部分。这个策略有点像在高速路上限速到 70 迈对车做维护，尽管有挑战，但是比起重写的风险小很多。</p><p>Martin Fowler  将这种现代化策略成为绞杀（Strangler）应用，名字来源于雨林中的绞杀藤（strangler vine），也叫绞杀榕 (strangler  fig)。绞杀藤为了爬到森林顶端都要缠绕着大树生长，一段时间后，树死了，留下树形藤。这种应用也使用同一种模式，围绕着传统应用开发了新型微服务应用，传统应用会渐渐退出舞台。</p><p>我们来看看其他可行策略。</p><h3 id="策略-1——停止挖掘"><a href="#策略-1——停止挖掘" class="headerlink" title="策略 1——停止挖掘"></a>策略 1——停止挖掘</h3><p>Law of Holes 是说当自己进洞就应该停止挖掘。对于单体式应用不可管理时这是最佳建议。换句话说，应该停止让单体式应用继续变大，也就是说当开发新功能时不应该为旧单体应用添加新代码，最佳方法应该是将新功能开发成独立微服务。如下图所示：</p><p><img src="https://doocs.gitee.io/advanced-java/docs/micro-services/images/Law-of-Holes.png" alt="停止挖掘流程"></p><p>除了新服务和传统应用，还有两个模块，其一是请求路由器，负责处理入口（http）请求，有点像之前提到的 API 网关。路由器将新功能请求发送给新开发的服务，而将传统请求还发给单体式应用。</p><p>另外一个是胶水代码（glue code），将微服务和单体应用集成起来，微服务很少能独立存在，经常会访问单体应用的数据。胶水代码，可能在单体应用或者为服务或者二者兼而有之，负责数据整合。微服务通过胶水代码从单体应用中读写数据。</p><p>微服务有三种方式访问单体应用数据：</p><ul><li>换气单体应用提供的远程 API</li><li>直接访问单体应用数据库</li><li>自己维护一份从单体应用中同步的数据</li></ul><p>胶水代码也被称为容灾层（anti-corruption layer），这是因为胶水代码保护微服务全新域模型免受传统单体应用域模型污染。胶水代码在这两种模型间提供翻译功能。术语  anti-corruption layer 第一次出现在 Eric Evans 撰写的必读书 _Domain Driven  Design_，随后就被提炼为一篇白皮书。开发容灾层可能有点不是很重要，但却是避免单体式泥潭的必要部分。</p><p>将新功能以轻量级微服务方式实现由很多优点，例如可以阻止单体应用变的更加无法管理。微服务本身可以开发、部署和独立扩展。采用微服务架构会给开发者带来不同的切身感受。</p><p>然而，这方法并不解决任何单体式本身问题，为了解决单体式本身问题必须深入单体应用  做出改变。我们来看看这么做的策略。</p><h3 id="策略-2——将前端和后端分离"><a href="#策略-2——将前端和后端分离" class="headerlink" title="策略 2——将前端和后端分离"></a>策略 2——将前端和后端分离</h3><p>减小单体式应用复杂度的策略是讲表现层和业务逻辑、数据访问层分开。典型的企业应用至少有三个不同元素构成：</p><ol><li>表现层——处理 HTTP 请求，要么响应一个 RESTAPI 请求，要么是提供一个基于 HTML 的图形接口。对于一个复杂用户接口应用，表现层经常是代码重要的部分。</li><li>业务逻辑层——完成业务逻辑的应用核心。</li><li>数据访问层——访问基础元素，例如数据库和消息代理。</li></ol><p>在表现层与业务数据访问层之间有清晰的隔离。业务层有由若干方面组成的粗粒度（coarse-grained）的 API，内部包含了业务逻辑元素。API  是可以将单体业务分割成两个更小应用的天然边界，其中一个应用是表现层，另外一个是业务和数据访问逻辑。分割后，表现逻辑应用远程调用业务逻辑应用，下图表示迁移前后架构不同：</p><p><img src="https://doocs.gitee.io/advanced-java/docs/micro-services/images/Before-and-after-migration.png" alt="迁移前后的架构"></p><p>单体应用这么分割有两个好处，其一使得应用两部分开发、部署和扩展各自独立，特别地，允许表现层开发者在用户界面上快速选择，进行 A/B 测试；其二，使得一些远程 API 可以被微服务调用。</p><p>然而，这种策略只是部分的解决方案。很可能应用的两部分之一或者全部都是不可管理的，因此需要使用第三种策略来消除剩余的单体架构。</p><h3 id="策略-3——抽出服务"><a href="#策略-3——抽出服务" class="headerlink" title="策略 3——抽出服务"></a>策略 3——抽出服务</h3><p>第三种迁移策略就是从单体应用中抽取出某些模块成为独立微服务。每当抽取一个模块变成微服务，单体应用就变简单一些；一旦转换足够多的模块，单体应用本身已经不成为问题了，要么消失了，要么简单到成为一个服务。</p><h4 id="排序那个模块应该被转成微服务"><a href="#排序那个模块应该被转成微服务" class="headerlink" title="排序那个模块应该被转成微服务"></a>排序那个模块应该被转成微服务</h4><p>一个巨大的复杂单体应用由成十上百个模块构成，每个都是被抽取对象。决定第一个被抽取模块一般都是挑战，一般最好是从最容易抽取的模块开始，这会让开发者积累足够经验，这些经验可以为后续模块化工作带来巨大好处。</p><p>转换模块成为微服务一般很耗费时间，一般可以根据获益程度来排序，一般从经常变化模块开始会获益最大。一旦转换一个模块为微服务，就可以将其开发部署成独立模块，从而加速开发进程。</p><p>将资源消耗大户先抽取出来也是排序标准之一。例如，将内存数据库抽取出来成为一个微服务会非常有用，可以将其部署在大内存主机上。同样的，将对计算资源很敏感的算法应用抽取出来也是非常有益的，这种服务可以被部署在有很多 CPU 的主机上。通过将资源消耗模块转换成微服务，可以使得应用易于扩展。</p><p>查找现有粗粒度边界来决定哪个模块应该被抽取，也是很有益的，这使得移植工作更容易和简单。例如，只与其他应用异步同步消息的模块就是一个明显边界，可以很简单容易地将其转换为微服务。</p><h4 id="如何抽取模块"><a href="#如何抽取模块" class="headerlink" title="如何抽取模块"></a>如何抽取模块</h4><p>抽取模块第一步就是定义好模块和单体应用之间粗粒度接口，由于单体应用需要微服务的数据，反之亦然，因此更像是一个双向 API。因为必须在负责依赖关系和细粒度接口模式之间做好平衡，因此开发这种 API  很有挑战性，尤其对使用域模型模式的业务逻辑层来说更具有挑战，因此经常需要改变代码来解决依赖性问题，如图所示：</p><p>一旦完成粗粒度接口，也就将此模块转换成独立微服务。为了实现，必须写代码使得单体应用和微服务之间通过使用进程间通信（IPC）机制的 API 来交换信息。如图所示迁移前后对比：</p><p><img src="https://doocs.gitee.io/advanced-java/docs/micro-services/images/30103116_ZCcM.png" alt="迁移前后对比"></p><p>此例中，正在使用 Y 模块的 Z 模块是备选抽取模块，其元素正在被 X 模块使用，迁移第一步就是定义一套粗粒度 APIs，第一个接口应该是被 X 模块使用的内部接口，用于激活 Z 模块；第二个接口是被 Z 模块使用的外部接口，用于激活 Y 模块。</p><p>迁移第二步就是将模块转换成独立服务。内部和外部接口都使用基于 IPC 机制的代码，一般都会将 Z 模块整合成一个微服务基础框架，来出来割接过程中的问题，例如服务发现。</p><p>抽取完模块，也就可以开发、部署和扩展另外一个服务，此服务独立于单体应用和其它服务。可以从头写代码实现服务；这种情况下，将服务和单体应用整合的 API  代码成为容灾层，在两种域模型之间进行翻译工作。每抽取一个服务，就朝着微服务方向前进一步。随着时间推移，单体应用将会越来越简单，用户就可以增加更多独立的微服务。 将现有应用迁移成微服务架构的现代化应用，不应该通过从头重写代码方式实现，相反，应该通过逐步迁移的方式。有三种策略可以考虑：将新功能以微服务方式实现；将表现层与业务数据访问层分离；将现存模块抽取变成微服务。随着时间推移，微服务数量会增加，开发团队的弹性和效率将会大大增加。</p><h2 id="微服务四大问题"><a href="#微服务四大问题" class="headerlink" title="微服务四大问题"></a>微服务四大问题</h2><blockquote><p>微服务架构问题</p><p>​    分布式架构会遇到的核心问题</p><pre><code>1. 这么多服务，客户端如何去访问（服务路由）2. 这么多服务，服务之间如何通信（异步调用）3. 这么多服务，如何治理（高可用）4. 服务挂了怎么办</code></pre></blockquote><h3 id="常见的两套解决方案"><a href="#常见的两套解决方案" class="headerlink" title="常见的两套解决方案"></a>常见的两套解决方案</h3><p><code>Spring Cloud</code>是一套生态，就是用来解决以上四个问题</p><ol><li><p><code>Spring Cloud Netflix</code> 第一套解决方案</p><p>针对第一个问题：API网关=》zuul组件</p><p>针对第二个问题：Feign=》HttpClient=》HTTP通信方式，同步并阻塞</p><p>针对第三个问题：服务注册与发现=》Eureka</p><p>针对第四个问题：熔断机制=》Hystrix</p></li><li><p><code>Apache Dubbo+Zookeeper</code> 第二套解决方案</p><p>针对第一个问题：API网关=》没有</p><p>针对第二个问题：Dubbo=》Java实现的高效RPC框架</p><p>针对第三个问题：服务注册与发现=》Zookeeper</p><p>针对第四个问题：熔断机制=》没有=&gt;借助Hystrix</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot之@Import</title>
      <link href="2021/05/13/zhu-jie-import/"/>
      <url>2021/05/13/zhu-jie-import/</url>
      
        <content type="html"><![CDATA[<h2 id="Import注解的作用"><a href="#Import注解的作用" class="headerlink" title="@Import注解的作用"></a>@Import注解的作用</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>在平时看源码或者很多配置类上面都会出现@Import注解,功能就是和Spring XML 里面 的 一样. @Import注解是用来导入配置类或者一些需要前置加载的类.</p><h3 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2.源码解析"></a>2.源码解析</h3><h4 id="2-1-导入配置的三种类型"><a href="#2-1-导入配置的三种类型" class="headerlink" title="2.1 导入配置的三种类型"></a>2.1 导入配置的三种类型</h4><p>@Import支持 三种方式<br> 1.带有@Configuration的配置类(4.2 版本之前只可以导入配置类，4.2版本之后 也可以导入 普通类)<br> 2.ImportSelector 的实现<br> 3.ImportBeanDefinitionRegistrar 的实现</p><h4 id="2-2-源码解析"><a href="#2-2-源码解析" class="headerlink" title="2.2 源码解析"></a>2.2 源码解析</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 表示要导入的一个或多个component类，尤其是带有@Configuration的类 * Indicates one or more component classes to import; typically * @Configuration classes. * * 功能类似XML 里面的 &lt;import/> * 可以导入 @Configuration配置类，ImportSelector、ImportBeanDefinitionRegistrar 的实现 * 4.2 版本之后可以导入普通component类(类似AnnotationConfigApplicationContext#register) * &lt;p>Provides functionality equivalent to the &#123;@code &lt;import/>&#125; element in Spring XML. * Allows for importing &#123;@code @Configuration&#125; classes, &#123;@link ImportSelector&#125; and * &#123;@link ImportBeanDefinitionRegistrar&#125; implementations, as well as regular component * classes (as of 4.2; analogous to &#123;@link AnnotationConfigApplicationContext#register&#125;). * * &lt;p>&#123;@code @Bean&#125; definitions declared in imported &#123;@code @Configuration&#125; classes should be * accessed by using &#123;@link org.springframework.beans.factory.annotation.Autowired @Autowired&#125; * injection. Either the bean itself can be autowired, or the configuration class instance * declaring the bean can be autowired. The latter approach allows for explicit, IDE-friendly * navigation between &#123;@code @Configuration&#125; class methods. * 可以在类级别声明或作为元注释声明 * &lt;p>May be declared at the class level or as a meta-annotation. * 如需要引入XML或其他类型的文件，使用@ImportResource注解 * &lt;p>If XML or other non-&#123;@code @Configuration&#125; bean definition resources need to be * imported, use the &#123;@link ImportResource @ImportResource&#125; annotation instead. */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Import</span> <span class="token punctuation">&#123;</span><span class="token comment">/** * &#123;@link Configuration @Configuration&#125;, &#123;@link ImportSelector&#125;, * &#123;@link ImportBeanDefinitionRegistrar&#125;, or regular component classes to import. */</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-测试例子"><a href="#3-测试例子" class="headerlink" title="3.测试例子"></a>3.测试例子</h3><h4 id="3-1-导入普通类"><a href="#3-1-导入普通类" class="headerlink" title="3.1 导入普通类"></a>3.1 导入普通类</h4><p>1.新建一个普通类TestA</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestA</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类名:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.新建一个ImportConfig类，在类上加@Configuration，加上@Configuration是为了能让Spring 扫描到这个类，并且直接通过@Import引入TestA类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">TestA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.测试结果</p><p>TestA 是一个普通的类，现在可以被@Autowired注释然后调用，就直接说明已经被Spring 注入并管理了，普通的类都是需要先实例化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AnnotationTestApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">TestA</span> testA<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        testA<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印：</p><pre class="line-numbers language-jav" data-language="jav"><code class="language-jav">类名:com.itxxj.annotationtest.TestA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-导入带有-Configuration的配置类"><a href="#3-2-导入带有-Configuration的配置类" class="headerlink" title="3.2 导入带有@Configuration的配置类"></a>3.2 导入带有@Configuration的配置类</h4><p>1.新建一个普通类TestB</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestB</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类名:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在ImportConfig中直接引入TestB</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">TestA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">TestB</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.测试结果</p><p>TestB.class 的类上面已经有了@Configuration注解,本身就会被spring扫到并实例，@import引入带有@Configuration的配置文件，是需要先实例这个配置文件再进行相关操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token class-name">TestB</span> testB<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    testB<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">类名<span class="token operator">:</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>itxxj<span class="token punctuation">.</span>annotationtest<span class="token punctuation">.</span></span>TestB</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-通过ImportSelector方式导入类"><a href="#3-3-通过ImportSelector方式导入类" class="headerlink" title="3.3 通过ImportSelector方式导入类"></a>3.3 通过ImportSelector方式导入类</h4><p>1.新建TestC.class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestC</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类名:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.新建SelfImportSelector.class 实现ImportSelector 接口,注入TestC.class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"com.itxxj.annotationtest.TestC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.ImportConfig上面引入SelfImportSelector.class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">TestA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">TestB</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">SelfImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.测试结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token class-name">TestC</span> testC<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    testC<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">类名<span class="token operator">:</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>itxxj<span class="token punctuation">.</span>annotationtest<span class="token punctuation">.</span></span>TestC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-4-通过-ImportBeanDefinitionRegistrar-方式导入的类"><a href="#3-4-通过-ImportBeanDefinitionRegistrar-方式导入的类" class="headerlink" title="3.4 通过 ImportBeanDefinitionRegistrar 方式导入的类"></a>3.4 通过 ImportBeanDefinitionRegistrar 方式导入的类</h4><p>1.新建TestD.class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestD</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类名:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.新建SelfImportBeanDefinitionRegistrar.class,实现接口ImportBeanDefinitionRegistrar,注入TestD.class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfImportBeanDefinitionRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RootBeanDefinition</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">TestD</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"testD"</span><span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.ImportConfig类上加上导入SelfImportBeanDefinitionRegistrar.class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">TestA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">TestB</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">SelfImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">SelfImportBeanDefinitionRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.测试结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token class-name">TestD</span> testD<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    testD<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">类名<span class="token operator">:</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>itxxj<span class="token punctuation">.</span>annotationtest<span class="token punctuation">.</span></span>TestD</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-详细过程解析"><a href="#4-详细过程解析" class="headerlink" title="4.详细过程解析"></a>4.详细过程解析</h3><blockquote><pre class="line-numbers language-none"><code class="language-none">ConfigurationClassParser所在包:org.springframework.context.annotation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>这里主要看 ConfigurationClassParser.java 里面的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Process any @Import annotations</span><span class="token function">processImports</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> <span class="token function">getImports</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//具体在311行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-1-getImport方法"><a href="#4-1-getImport方法" class="headerlink" title="4.1 getImport方法"></a>4.1 getImport方法</h4><p>在分析这个方法之前，我们先看一下 getImports 方法，这个方法就是获取所有的@import 里面的类<br>这里是获取 @import 里面的类，大致流程如下：</p><ol><li>定义一个 visited 的集合，用作 是否已经 判断过的标志</li><li>这里就是获取sourceClass 上面的 所有的 annotation，并挨个判断， 如果不是 @import ,那就 进一步递归 调用 对应的 annotation,直到全部结束</li><li>加载sourceClass 里面 的@Import annotation 里面对应的类名 ,最后返回</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Returns &#123;@code @Import&#125; class, considering all meta-annotations. */</span><span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SourceClass</span><span class="token punctuation">></span></span> <span class="token function">getImports</span><span class="token punctuation">(</span><span class="token class-name">SourceClass</span> sourceClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SourceClass</span><span class="token punctuation">></span></span> imports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SourceClass</span><span class="token punctuation">></span></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">collectImports</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">,</span> imports<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> imports<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这里就是获取sourceClass 上面的所有的 annotation， 如果不是 @import ,那就进一步递归调用对应的 annotation,直到全部结束</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">collectImports</span><span class="token punctuation">(</span><span class="token class-name">SourceClass</span> sourceClass<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SourceClass</span><span class="token punctuation">></span></span> imports<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SourceClass</span><span class="token punctuation">></span></span> visited<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SourceClass</span> annotation <span class="token operator">:</span> sourceClass<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> annName <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>annName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Import</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">collectImports</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> imports<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>imports<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">Import</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-processImports方法"><a href="#4-2-processImports方法" class="headerlink" title="4.2 processImports方法"></a>4.2 processImports方法</h4><p>processImports 这个方法 的代码逻辑也很清晰，流程图如下：</p><p><img src="/.io//MyBlog\source_posts\注解-@Import\1.png" alt="processImports逻辑流程"></p><p>大致的流程如下:</p><p>1.判断 importCandidates 是否为空，为空 退出</p><p>2.判断isChainedImportOnStack ，如果为true ,加入 problemReporter 里面的error ，并退出</p><p>3.把当前的 configClass 加入到 ImportStack里面，ImportStack 是继承了 ArrayDeque // TODO 和实现了 ImportRegistry// TODO</p><p>4.对 getImports 里面获取到的 需要import 的类 进行遍历 处理</p><blockquote><p>4.1 如果是 ImportSelector 类型，首先实例一个 ImportSelector 对象，然后 对其进行 Aware 扩展(如果 实现了 Aware 接口)</p><p>4.1.2 进一步判断 是否 是 DeferredImportSelector 类型，如果是 ，加入到 deferredImportSelectors 里面，最后处理 ，这里可以看一下 方法parse(Set configCandidates)， 里面最后一行才调用,这也就是 有的时候，如果想最后注入，就可以定义为deferredImportSelectors 类型</p><p>4.1.2 如果 不是 DeferredImportSelector 类型 ，那就 调用 selectImports 方法，获取到所有的需要 注入的类，这时 再次调用 processImports 方法，这里调用processImports 方法，其实 是把 这些需要注入的类当成普通的 @Configuration 处理</p></blockquote><p>5.如果是 ImportBeanDefinitionRegistrar 类型，这里也是 先实例一个对象，然后加入到 importBeanDefinitionRegistrars 里面，后续 会在 ConfigurationClassBeanDefinitionReader 这个类里面 的 loadBeanDefinitionsFromRegistrars 方法处理的<br>6.如果上面两种类型都不是，那就是当初普通的 带有@Configuration 的类进行处理了</p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
          <category> 注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot之@SpringBootApplication</title>
      <link href="2021/05/13/zhu-jie-springbootapplication/"/>
      <url>2021/05/13/zhu-jie-springbootapplication/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p><code>springboot</code>与<code>spring</code>的区别有两个地方：</p><p>（1）在<code>Springboot01HelloworldApplication</code>主启动类上添加了注解<code>@SpringBootApplication</code></p><p>（2）main方法调用了<code>SpringApplication.run(Springboot01HelloworldApplication.class, args);</code></p><p>这里主要先解析第一点。</p><h3 id="2-进入主题"><a href="#2-进入主题" class="headerlink" title="2.进入主题"></a>2.进入主题</h3><p>主启动类源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot01HelloworldApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Springboot01HelloworldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@SpringBootApplication</code>是<code>Sprnig Boot</code>项目的核心注解，目的是开启自动配置。</p><p>进入到<code>@SpringBootApplication</code>的源码，可以看到里面组合了三个我们感兴趣的注解：<code>@ComponentScan</code>,<code>@EnableAutoConfiguration</code>,<code>@SpringBootConfiguration</code>.我们一一分析这三个注解．</p><h4 id="2-1-ComponentScan"><a href="#2-1-ComponentScan" class="headerlink" title="2.1@ComponentScan"></a>2.1@ComponentScan</h4><p>使用过spring框架的小伙伴都知道，spring里有四大注解：<code>@Service</code>,<code>@Repository</code>,<code>@Component</code>,<code>@Controller</code>用来定义一个bean.<code>@ComponentScan</code>注解就是用来自动扫描被这些注解标识的类，最终生成ioc容器里的bean．可以通过设置<code>@ComponentScan</code>　basePackages，includeFilters，excludeFilters属性来动态确定自动扫描范围．如果不设置的话，spring默认的扫描范围是<code>@ComponentScan</code>注解所在配置类包及子包的类，</p><blockquote><p>注：使用<code>@SpringBootApplication</code>注解，就说明你使用了<code>@ComponentScan</code>的默认配置，这就建议你把使用<code>@SpringBootApplication</code>注解的类放置在root package，其他类都置在root package的子包里面，这样bean就不会被漏扫描</p></blockquote><p><code>@ComponentScan</code>的参数的作用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">basePackageClasses：对basepackages<span class="token punctuation">(</span><span class="token punctuation">)</span>指定扫描注释组件包类型安全的替代。 excludeFilters：指定不适合组件扫描的类型。 includeFilters：指定哪些类型有资格用于组件扫描。 lazyInit：指定是否应注册扫描的beans为lazy初始化。 nameGenerator：用于在Spring容器中的检测到的组件命名。 resourcePattern：控制可用于组件检测的类文件。 scopedProxy：指出代理是否应该对检测元件产生，在使用过程中会在代理风格时尚的范围是必要的。 scopeResolver：用于解决检测到的组件的范围。 useDefaultFilters：指示是否自动检测类的注释 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-SpringBootConfiguration"><a href="#2-2-SpringBootConfiguration" class="headerlink" title="2.2@SpringBootConfiguration"></a>2.2@SpringBootConfiguration</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">proxyBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个注解的作用与<code>@Configuration</code>作用相同，都是用来声明当前类是一个配置类．可以通过<code>＠Bean</code>注解生成IOC容器管理的bean.</p><p>例子：在<code>Springboot01HelloworldApplication</code>中定义bean，并在<code>＠HelloController</code>中注入使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot01HelloworldApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Springboot01HelloworldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">BeanTest</span> <span class="token function">beanTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>HelloController</code>中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">BeanTest</span> beanTest<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/test"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">beanTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> beanTest<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-EnableAutoConfiguration"><a href="#2-3-EnableAutoConfiguration" class="headerlink" title="2.3@EnableAutoConfiguration"></a>2.3@EnableAutoConfiguration</h4><p><code>@EnableAutoConfiguration</code>是springboot实现自动化配置的核心注解，通过这个注解把spring应用所需的bean注入容器中．<code>@EnableAutoConfiguration</code>源码通过<code>@Import</code>注入了一个<code>ImportSelector</code>的实现类<code>AutoConfigurationImportSelector</code>,这个<code>ImportSelector</code>最终实现根据我们的配置，动态加载所需bean.</p><p>我们首先看<code>AutoConfigurationImportSelector</code>的<code>selectImports</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> NO_IMPORTS<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//重点在getAutoConfigurationEntry方法</span>    <span class="token class-name">AutoConfigurationEntry</span> autoConfigurationEntry <span class="token operator">=</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回需要注入的bean的类路径</span>    <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>getAutoConfigurationEntry</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//输入参数:annotationMetadata 是＠import所用在的注解．这里指定是@EnableAutoConfiguration</span><span class="token keyword">protected</span> <span class="token class-name">AutoConfigurationEntry</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> EMPTY_ENTRY<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//获取注解里设置的属性，在＠SpringBootApplication设置的exclude,excludeName属性值，其实就是设置＠EnableAutoConfiguration的这两个属性值</span><span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里getCandidateConfigurations调用了一个核心方法SpringFactoriesLoader.loadFactoryNames</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//去掉重复项</span>configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取自己配置的不需要生成bean的class</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//校验被exclude的类是否都是springboot自动化配置里的类</span><span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//删除被exclude掉的类</span>configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//过滤刷选，满足OnClassCondition的类</span>configurations <span class="token operator">=</span> <span class="token function">getConfigurationClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>getCandidateConfigurations</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//getSpringFactoriesLoaderFactoryClass()返回的是EnableAutoConfiguration.class</span>    <span class="token comment">//getBeanClassLoader()返回的是this.beanClassLoader</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations <span class="token operator">=</span> <span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> <span class="token string">"No auto configuration classes found in META-INF/spring.factories. If you "</span><span class="token operator">+</span> <span class="token string">"are using a custom packaging, make sure that file is correct."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> configurations<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SpringFactoriesLoader.loadFactoryNames</code>方法</p><p><strong>自动配置幕后英雄：<code>SpringFactoriesLoader</code>详解</strong><br><code>SpringFactoriesLoader</code>属于Spring框架私有的一种扩展方案，其主要功能就是从指定的配置文件<code>META-INF/spring.factories</code>加载配置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> factoryType<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ClassLoader</span> classLoaderToUse <span class="token operator">=</span> classLoader<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>classLoaderToUse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>classLoaderToUse <span class="token operator">=</span> <span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> factoryTypeName <span class="token operator">=</span> factoryType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span>classLoaderToUse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>factoryTypeName<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";</span>            <span class="token comment">//从spring-boot-autoconfigure　jar包里面META-INF/spring.factories加载配置类的名称，打开这个文件发现里面包含了springboot框架提供的所有配置类</span><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">></span></span> urls <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>FACTORIES_RESOURCE_LOCATION<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">URL</span> url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UrlResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token class-name">PropertiesLoaderUtils</span><span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> factoryTypeName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> factoryImplementationNames <span class="token operator">=</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> factoryImplementationName <span class="token operator">:</span> factoryImplementationNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>factoryTypeName<span class="token punctuation">,</span> key <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factoryImplementationName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将所有列表替换为包含唯一元素的不可修改列表</span>result<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span>factoryType<span class="token punctuation">,</span> implementations<span class="token punctuation">)</span> <span class="token operator">-></span> implementations<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">collectingAndThen</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token operator">::</span><span class="token function">unmodifiableList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unable to load factories from location ["</span> <span class="token operator">+</span>FACTORIES_RESOURCE_LOCATION <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
          <category> 注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下mysql的rpm安装流程</title>
      <link href="2021/04/30/linux-xia-mysql-de-rpm-an-zhuang-liu-cheng/"/>
      <url>2021/04/30/linux-xia-mysql-de-rpm-an-zhuang-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步、前往mysql官网下载所需的版本"><a href="#第一步、前往mysql官网下载所需的版本" class="headerlink" title="第一步、前往mysql官网下载所需的版本"></a>第一步、前往mysql官网下载所需的版本</h2><blockquote><p>Mysql5.7的rpm包下载地址为<a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</a></p><p>下载完成后就上传的CentOS系统上。</p></blockquote><h2 id="第二步、解压安装"><a href="#第二步、解压安装" class="headerlink" title="第二步、解压安装"></a>第二步、解压安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaoxiangjie xiaoxiangjie<span class="token punctuation">]</span><span class="token comment"># mkdir mysql #创建mysql目录</span><span class="token punctuation">[</span>root@xiaoxiangjie xiaoxiangjie<span class="token punctuation">]</span><span class="token comment"># tar xf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar -C mysql/ #解压至mysql目录下</span><span class="token punctuation">[</span>root@xiaoxiangjie xiaoxiangjie<span class="token punctuation">]</span><span class="token comment"># yum -y install make gcc-c++ cmake bison ncurses-devel libaio libaio-devel net-tools #安装依赖包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于CentOS7（但是在CentOS8中好像没有，不过还是走一下流程)开始自带的数据库是mariadb，所以需要卸载系统中的mariadb组件，才能安装mysql的组件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaoxiangjie xiaoxiangjie<span class="token punctuation">]</span><span class="token comment"># rpm -qa | grep mariadb #查看是否有mariadb</span><span class="token punctuation">[</span>root@xiaoxiangjie xiaoxiangjie<span class="token punctuation">]</span><span class="token comment"># yum -y remove mariadb-libs #卸载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在开始安装mysql，由于依赖关系，所以顺序是固定的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaoxiangjie mysql<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm </span><span class="token punctuation">[</span>root@xiaoxiangjie mysql<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><span class="token punctuation">[</span>root@xiaoxiangjie mysql<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm </span><span class="token punctuation">[</span>root@xiaoxiangjie mysql<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm </span><span class="token punctuation">[</span>root@xiaoxiangjie mysql<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm </span>在安装mysql-community-server-5.7.26-1.el7.x86_64.rpm的时候出现如下错误：error: Failed dependencies:perl<span class="token punctuation">(</span>Getopt::Long<span class="token punctuation">)</span> is needed by mysql-community-server-5.7.26-1.el7.x86_64安装perl<span class="token punctuation">[</span>root@xiaoxiangjie mysql<span class="token punctuation">]</span><span class="token comment"># yum -y install perl</span>又出现问题：<span class="token punctuation">[</span>/usr/lib/tmpfiles.d/mysql.conf:16<span class="token punctuation">]</span> Line references path below legacy directory /var/run/, updating /var/run/mysqld → /run/mysqld<span class="token punctuation">;</span> please update the tmpfiles.d/ drop-in <span class="token function">file</span> accordingly.解决方案：<span class="token punctuation">[</span>root@xiaoxiangjie mysql<span class="token punctuation">]</span><span class="token comment"># vim /usr/lib/tmpfiles.d/mysql.conf #在16行将/var/run/mysqld改为/run/mysqld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动MySQL</span><span class="token punctuation">[</span>root@xiaoxiangjie mysql<span class="token punctuation">]</span><span class="token comment"># systemctl start mysqld</span><span class="token comment">#设置为开机自启</span><span class="token punctuation">[</span>root@xiaoxiangjie mysql<span class="token punctuation">]</span><span class="token comment"># systemctl enable mysqld</span><span class="token comment">#查看MySQL运行状态，运行状态如下</span><span class="token punctuation">[</span>root@xiaoxiangjie mysql<span class="token punctuation">]</span><span class="token comment"># systemctl status mysqld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时MySQL已经正常运行，不过要想进入MySQL还得找出此时root用户的密码，通过以下命令可以在日志文件中找出密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaoxiangjie ~<span class="token punctuation">]</span><span class="token comment"># grep "password" /var/log/mysqld.log</span><span class="token number">2021</span>-04-28T08:44:07.870764Z <span class="token number">1</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: J_<span class="token punctuation">;</span>TswJ<span class="token operator">&amp;</span>P3Xx <span class="token comment">#J_;TswJ&amp;P3Xx就是密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如下命令登录数据库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaoxiangjie ~<span class="token punctuation">]</span><span class="token comment"># mysql -uroot -p</span>Enter password:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库，如下命令修改密码：</p><pre class="line-numbers language-mys" data-language="mys"><code class="language-mys">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new password&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中‘new password’替换成你要设置的密码，注意:密码设置必须要<strong>大小写字母数字和特殊符号（,/‘;:等）</strong>,不然不能配置成功。</p><pre class="line-numbers language-my" data-language="my"><code class="language-my">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;Root28.&#x2F;&#39;;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果出现如下错误：</p><pre class="line-numbers language-mysq" data-language="mysq"><code class="language-mysq">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是因为密码的复杂度不符合默认规定(还是需要先修改密码成功后)，如下命令查看mysql默认密码复杂度：</p><pre class="line-numbers language-mysq" data-language="mysq"><code class="language-mysq">mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;+--------------------------------------+--------+| Variable_name                        | Value  |+--------------------------------------+--------+| validate_password_check_user_name    | OFF    || validate_password_dictionary_file    |        || validate_password_length             | 8      || validate_password_mixed_case_count   | 1      || validate_password_number_count       | 1      || validate_password_policy             | MEDIUM || validate_password_special_char_count | 1      |+--------------------------------------+--------+7 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如需修改密码复杂度参考如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_policy</span><span class="token operator">=</span>LOW<span class="token punctuation">;</span> <span class="token comment">#修改验证策略</span>Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> SHOW VARIABLES LIKE <span class="token string">'validate_password%'</span><span class="token punctuation">;</span>+--------------------------------------+-------+<span class="token operator">|</span> Variable_name                        <span class="token operator">|</span> Value <span class="token operator">|</span>+--------------------------------------+-------+<span class="token operator">|</span> validate_password_check_user_name    <span class="token operator">|</span> OFF   <span class="token operator">|</span><span class="token operator">|</span> validate_password_dictionary_file    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> validate_password_length             <span class="token operator">|</span> <span class="token number">8</span>     <span class="token operator">|</span><span class="token operator">|</span> validate_password_mixed_case_count   <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span><span class="token operator">|</span> validate_password_number_count       <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span><span class="token operator">|</span> validate_password_policy             <span class="token operator">|</span> LOW   <span class="token operator">|</span> <span class="token comment">#修改为LOW后就只验证密码的长度了</span><span class="token operator">|</span> validate_password_special_char_count <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span>+--------------------------------------+-------+<span class="token number">7</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_length</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">#修改密码验证的长度</span>Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> SHOW VARIABLES LIKE <span class="token string">'validate_password%'</span><span class="token punctuation">;</span>+--------------------------------------+-------+<span class="token operator">|</span> Variable_name                        <span class="token operator">|</span> Value <span class="token operator">|</span>+--------------------------------------+-------+<span class="token operator">|</span> validate_password_check_user_name    <span class="token operator">|</span> OFF   <span class="token operator">|</span><span class="token operator">|</span> validate_password_dictionary_file    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> validate_password_length             <span class="token operator">|</span> <span class="token number">4</span>     <span class="token operator">|</span> <span class="token comment">#密码长度验证修改成功</span><span class="token operator">|</span> validate_password_mixed_case_count   <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span><span class="token operator">|</span> validate_password_number_count       <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span><span class="token operator">|</span> validate_password_policy             <span class="token operator">|</span> LOW   <span class="token operator">|</span><span class="token operator">|</span> validate_password_special_char_count <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span>+--------------------------------------+-------+<span class="token number">7</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时再修改你想要的简单密码</p><pre class="line-numbers language-mys" data-language="mys"><code class="language-mys">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;root&#39;;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="第三步、开启mysql远程访问"><a href="#第三步、开启mysql远程访问" class="headerlink" title="第三步、开启mysql远程访问"></a>第三步、开启mysql远程访问</h2><p>执行以下命令开启远程访问限制</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; use mysqlReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; select user,host from user;+---------------+---------------+| user          | host          |+---------------+---------------+| root          | 39.106.63.239 || mysql.session | localhost     || mysql.sys     | localhost     || root          | localhost     |+---------------+---------------+4 rows in set (0.00 sec)mysql&gt; update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;ERROR 1062 (23000): Duplicate entry &#39;%-root&#39; for key &#39;PRIMARY&#39; #虽然报错了，但是查看mysql表发现修改成功了mysql&gt; select user,host from user;+---------------+---------------+| user          | host          |+---------------+---------------+| root          | %             || root          | 39.106.63.239 || mysql.session | localhost     || mysql.sys     | localhost     |+---------------+---------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再输入下面两行命令</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; flush privileges;mysql&gt; quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="第四步、开启防火墙端口"><a href="#第四步、开启防火墙端口" class="headerlink" title="第四步、开启防火墙端口"></a>第四步、开启防火墙端口</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaoxiangjie ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-ports #查看已经开启的端口</span><span class="token punctuation">[</span>root@xiaoxiangjie ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --permanent --add-port=3306/tcp #开放3306端口</span><span class="token punctuation">[</span>root@xiaoxiangjie ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --reload #添加端口后，需要重新加载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="第五步、更改mysql的语言"><a href="#第五步、更改mysql的语言" class="headerlink" title="第五步、更改mysql的语言"></a>第五步、更改mysql的语言</h2><p>首先重新登录mysql，然后输入status：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; status--------------mysql  Ver 14.14 Distrib 5.7.26, for Linux (x86_64) using  EditLine wrapperConnection id:2Current database:Current user:root@localhostSSL:Not in useCurrent pager:stdoutUsing outfile:&#39;&#39;Using delimiter:;Server version:5.7.26 MySQL Community Server (GPL)Protocol version:10Connection:Localhost via UNIX socketServer characterset:latin1  #不是utf-8Db     characterset:latin1  #不是utf-8Client characterset:utf8Conn.  characterset:utf8UNIX socket:&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sockUptime:46 secThreads: 1  Questions: 5  Slow queries: 0  Opens: 105  Flush tables: 1  Open tables: 98  Queries per second avg: 0.108--------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，Server和Db不是utf-8，修改为utf8即可。</p><p>因此我们先退出mysql，然后再到/etc目录下的my.cnf文件下修改一下文件内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaoxiangjie ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/my.cnf</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[client] #新增代码default-character-set&#x3D;utf8 #新增代码# For advice on how to change settings please see# http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;server-configuration-defaults.html[mysqld]## Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size &#x3D; 128M## Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin## Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size &#x3D; 128M# sort_buffer_size &#x3D; 2M# read_rnd_buffer_size &#x3D; 2Mdatadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysqlsocket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sockcharacter-set-server&#x3D;utf8 #新增代码collation-server&#x3D;utf8_general_ci #新增代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存更改后的my.cnf文件后，重启下mysql，然后输入status再次查看，你就会发现变化啦</p><pre class="line-numbers language-mys" data-language="mys"><code class="language-mys">[root@xiaoxiangjie ~]# service mysqld restartRedirecting to &#x2F;bin&#x2F;systemctl restart mysqld.service[root@xiaoxiangjie ~]# mysql -uroot -pEnter password: mysql&gt; status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>至此安装完毕</strong></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客（1）</title>
      <link href="2021/04/24/hexo-da-jian-bo-ke-1/"/>
      <url>2021/04/24/hexo-da-jian-bo-ke-1/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>下载安装nodejs</p><p>通过npm配置淘宝源 cnpm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看cnpm版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>通过cnpm下载安装hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hexo安装所在地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">D:<span class="token punctuation">\</span>Nodejs<span class="token punctuation">\</span>node_global<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>hexo-cli<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>创建一个自己博客所在的文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">D:<span class="token punctuation">\</span>Myblog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过hexo初始化一个博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过hexo server 命令启动服务，默认是在</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://localhost:4000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客（2）</title>
      <link href="2021/04/24/hexo-da-jian-bo-ke-2/"/>
      <url>2021/04/24/hexo-da-jian-bo-ke-2/</url>
      
        <content type="html"><![CDATA[<h2 id="用github作为远程服务器搭建博客"><a href="#用github作为远程服务器搭建博客" class="headerlink" title="用github作为远程服务器搭建博客"></a>用github作为远程服务器搭建博客</h2><p>创建一个与GitHub账号名一样名字的仓库，我的是ciyaduxingxia</p><p>开启gitpage功能，那么就能通过ciyaduxingxia.github.io访问了</p><p>记住本地要安装git部署插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer-git <span class="token comment">#在blog目录下安装git部署插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="在本地配置远程服务器地址"><a href="#在本地配置远程服务器地址" class="headerlink" title="在本地配置远程服务器地址"></a>在本地配置远程服务器地址</h2><p>打开博客根目录下的_config.yml文件</p><p>远端服务器配置如下修改如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:type: <span class="token function">git</span>repo: git@github.com:ciyaduxingxia/ciyaduxingxia.github.io.gitbranch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：repository不要写成git clone的https的地址</p><p>错误写法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: https://github.com/ciyaduxingxia/ciyaduxingxia.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下载主题并配置"><a href="#下载主题并配置" class="headerlink" title="下载主题并配置"></a>下载主题并配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git themes <span class="token comment">#下载hexo-theme-matery主题到本地的themes文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改hexo根目录下的 _config.yml 文件 ： theme: hexo-theme-matery</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo c<span class="token comment">#清理一下</span>hexo g<span class="token comment">#生成</span>hexo d<span class="token comment">#部署到远程Github仓库</span>https://ciyaduxingxia.github.io/  <span class="token comment">#查看博客</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
